mdp

const int TT=120;//total time available 

//r2 velocity:1.0
const int travelr2at3_4=6 ;// from location: l2 (robot initial loc) to location: room2 (at3_4)    distance:6
const int travelr2at4_3=0 ;// from location: room2 (at3_4) to location: room2(at4_3)    distance:0
const int travelr2at2_5=0 ;// from location: room2 (at4_3) to location: room2(at2_5)    distance:0
const int r2at3_4Time=4;
const int r2at4_3Time=1;
const int r2at2_5Time=5;
const int maxIdler2=20;

formula done=(r2order=3);

//formulae for ordered tasks
formula r2at4_3Done = r2order>=2 ;


//formulae for consecutive tasks




module r2
 r2order:[0..3];
 r2time:[0..120];
 r2idleTime:[0..maxIdler2];
 [r2at3_4] r2order=0 & (r2time+r2at3_4Time+travelr2at3_4<=TT) & (r2time+travelr2at3_4 >= r2time) & (r2at4_3Done) -> (r2order'=1) & (r2time'=r2time+r2at3_4Time+travelr2at3_4);
 [r2at4_3] r2order=1 & (r2time+r2at4_3Time+travelr2at4_3<=TT) -> (r2order'=2) & (r2time'=r2time+r2at4_3Time+travelr2at4_3);
 [r2at2_5] r2order=2 & (r2time+r2at2_5Time+travelr2at2_5<=TT) & (r2time+travelr2at2_5 >= r2time) & (r2at4_3Done) -> (r2order'=3) & (r2time'=r2time+r2at2_5Time+travelr2at2_5);
 [r2idle] r2order!=3 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
endrewards



