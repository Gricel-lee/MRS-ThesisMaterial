mdp

const int TT=120;//total time available 

//r2 velocity:2.0
const int travelr2at3_13=5 ;// from location: l2 (robot initial loc) to location: room5 (at3_13)    distance:9
const int travelr2at4_12=0 ;// from location: room5 (at3_13) to location: room5(at4_12)    distance:0
const int travelr2at2_8=4 ;// from location: room5 (at4_12) to location: room3(at2_8)    distance:7
const int travelr2at3_4=4 ;// from location: room3 (at2_8) to location: room2(at3_4)    distance:7
const int travelr2at2_11=6 ;// from location: room2 (at3_4) to location: room4(at2_11)    distance:11
const int r2at3_13Time=5;
const int r2at4_12Time=3;
const int r2at2_8Time=7;
const int r2at3_4Time=5;
const int r2at2_11Time=7;
const int maxIdler2=20;

formula done=(r2order=5);

//formulae for ordered tasks


//formulae for consecutive tasks




module r2
 r2order:[0..5];
 r2time:[0..120];
 r2idleTime:[0..maxIdler2];
 [r2at3_13] r2order=0 & (r2time+r2at3_13Time+travelr2at3_13<=TT) -> (r2order'=1) & (r2time'=r2time+r2at3_13Time+travelr2at3_13);
 [r2at4_12] r2order=1 & (r2time+r2at4_12Time+travelr2at4_12<=TT) -> (r2order'=2) & (r2time'=r2time+r2at4_12Time+travelr2at4_12);
 [r2at2_8] r2order=2 & (r2time+r2at2_8Time+travelr2at2_8<=TT) -> (r2order'=3) & (r2time'=r2time+r2at2_8Time+travelr2at2_8);
 [r2at3_4] r2order=3 & (r2time+r2at3_4Time+travelr2at3_4<=TT) -> (r2order'=4) & (r2time'=r2time+r2at3_4Time+travelr2at3_4);
 [r2at2_11] r2order=4 & (r2time+r2at2_11Time+travelr2at2_11<=TT) -> (r2order'=5) & (r2time'=r2time+r2at2_11Time+travelr2at2_11);
 [r2idle] r2order!=5 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
endrewards



