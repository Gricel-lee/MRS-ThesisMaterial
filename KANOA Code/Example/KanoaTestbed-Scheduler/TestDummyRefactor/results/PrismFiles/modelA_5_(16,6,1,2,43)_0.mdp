mdp

const int TT=120;//total time available 

//r2 velocity:2.0
const int travelr2at4_9=4 ;// from location: l2 (robot initial loc) to location: room4 (at4_9)    distance:8
const int travelr2at2_14=2 ;// from location: room4 (at4_9) to location: room5(at2_14)    distance:4
const int travelr2at2_8=4 ;// from location: room5 (at2_14) to location: room3(at2_8)    distance:7
const int travelr2at3_7=0 ;// from location: room3 (at2_8) to location: room3(at3_7)    distance:0
const int r2at4_9Time=3;
const int r2at2_14Time=7;
const int r2at2_8Time=7;
const int r2at3_7Time=5;
const int maxIdler2=20;

formula done=(r2order=4);

//formulae for ordered tasks


//formulae for consecutive tasks




module r2
 r2order:[0..4];
 r2time:[0..120];
 r2idleTime:[0..maxIdler2];
 [r2at4_9] r2order=0 & (r2time+r2at4_9Time+travelr2at4_9<=TT) -> (r2order'=1) & (r2time'=r2time+r2at4_9Time+travelr2at4_9);
 [r2at2_14] r2order=1 & (r2time+r2at2_14Time+travelr2at2_14<=TT) -> (r2order'=2) & (r2time'=r2time+r2at2_14Time+travelr2at2_14);
 [r2at2_8] r2order=2 & (r2time+r2at2_8Time+travelr2at2_8<=TT) -> (r2order'=3) & (r2time'=r2time+r2at2_8Time+travelr2at2_8);
 [r2at3_7] r2order=3 & (r2time+r2at3_7Time+travelr2at3_7<=TT) -> (r2order'=4) & (r2time'=r2time+r2at3_7Time+travelr2at3_7);
 [r2idle] r2order!=4 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
endrewards



