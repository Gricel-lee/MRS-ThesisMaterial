mdp

const int TT=120;//total time available 

//r1 velocity:2.0
const int travelr1at3_7=2 ;// from location: l1 (robot initial loc) to location: room3 (at3_7)    distance:3
const int travelr1at3_4=4 ;// from location: room3 (at3_7) to location: room2(at3_4)    distance:7
const int travelr1at3_13=5 ;// from location: room2 (at3_4) to location: room5(at3_13)    distance:9
const int r1at3_7Time=4;
const int r1at3_4Time=4;
const int r1at3_13Time=4;
const int maxIdler1=20;

formula done=(r1order=3);

//formulae for ordered tasks


//formulae for consecutive tasks




module r1
 r1order:[0..3];
 r1time:[0..120];
 r1idleTime:[0..maxIdler1];
 [r1at3_7] r1order=0 & (r1time+r1at3_7Time+travelr1at3_7<=TT) -> (r1order'=1) & (r1time'=r1time+r1at3_7Time+travelr1at3_7);
 [r1at3_4] r1order=1 & (r1time+r1at3_4Time+travelr1at3_4<=TT) -> (r1order'=2) & (r1time'=r1time+r1at3_4Time+travelr1at3_4);
 [r1at3_13] r1order=2 & (r1time+r1at3_13Time+travelr1at3_13<=TT) -> (r1order'=3) & (r1time'=r1time+r1at3_13Time+travelr1at3_13);
 [r1idle] r1order!=3 & (r1time+1<=TT) & (r1idleTime+1<=maxIdler1) -> (r1time'=r1time+1) & (r1idleTime'=r1idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r1idle] true: 1;
endrewards



