mdp

const int TT=120;//total time available 

//r1 velocity:1.0
const int travelr1at4_6=3 ;// from location: l1 (robot initial loc) to location: room3 (at4_6)    distance:3
const int travelr1at4_3=3 ;// from location: room3 (at4_6) to location: room2(at4_3)    distance:3
const int travelr1at3_7=3 ;// from location: room2 (at4_3) to location: room3(at3_7)    distance:3
const int travelr1at2_5=3 ;// from location: room3 (at3_7) to location: room2(at2_5)    distance:3
const int travelr1at2_8=3 ;// from location: room2 (at2_5) to location: room3(at2_8)    distance:3
const int travelr1at3_4=3 ;// from location: room3 (at2_8) to location: room2(at3_4)    distance:3
const int r1at4_6Time=1;
const int r1at4_3Time=1;
const int r1at3_7Time=5;
const int r1at2_5Time=5;
const int r1at2_8Time=5;
const int r1at3_4Time=5;
const int maxIdler1=20;

formula done=(r1order=6);

//formulae for ordered tasks
formula r1at4_6Done = r1order>=1 ;
formula r1at4_3Done = r1order>=2 ;


//formulae for consecutive tasks




module r1
 r1order:[0..6];
 r1time:[0..120];
 r1idleTime:[0..maxIdler1];
 [r1at4_6] r1order=0 & (r1time+r1at4_6Time+travelr1at4_6<=TT) -> (r1order'=1) & (r1time'=r1time+r1at4_6Time+travelr1at4_6);
 [r1at4_3] r1order=1 & (r1time+r1at4_3Time+travelr1at4_3<=TT) -> (r1order'=2) & (r1time'=r1time+r1at4_3Time+travelr1at4_3);
 [r1at3_7] r1order=2 & (r1time+r1at3_7Time+travelr1at3_7<=TT) & (r1time+travelr1at3_7 >= r1time) & (r1at4_6Done) -> (r1order'=3) & (r1time'=r1time+r1at3_7Time+travelr1at3_7);
 [r1at2_5] r1order=3 & (r1time+r1at2_5Time+travelr1at2_5<=TT) & (r1time+travelr1at2_5 >= r1time) & (r1at4_3Done) -> (r1order'=4) & (r1time'=r1time+r1at2_5Time+travelr1at2_5);
 [r1at2_8] r1order=4 & (r1time+r1at2_8Time+travelr1at2_8<=TT) & (r1time+travelr1at2_8 >= r1time) & (r1at4_6Done) -> (r1order'=5) & (r1time'=r1time+r1at2_8Time+travelr1at2_8);
 [r1at3_4] r1order=5 & (r1time+r1at3_4Time+travelr1at3_4<=TT) & (r1time+travelr1at3_4 >= r1time) & (r1at4_3Done) -> (r1order'=6) & (r1time'=r1time+r1at3_4Time+travelr1at3_4);
 [r1idle] r1order!=6 & (r1time+1<=TT) & (r1idleTime+1<=maxIdler1) -> (r1time'=r1time+1) & (r1idleTime'=r1idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r1idle] true: 1;
endrewards



