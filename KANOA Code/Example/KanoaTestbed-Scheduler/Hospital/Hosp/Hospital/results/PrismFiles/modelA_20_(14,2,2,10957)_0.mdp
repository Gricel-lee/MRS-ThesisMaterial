mdp

const int TT=120;//total time available 

//r3 velocity:2.0
const int travelr3at3_10=4 ;// from location: l3 (robot initial loc) to location: room4 (at3_10)    distance:8
const int travelr3at4_12=2 ;// from location: room4 (at3_10) to location: room5(at4_12)    distance:4
const int travelr3at2_14=0 ;// from location: room5 (at4_12) to location: room5(at2_14)    distance:0
const int travelr3at3_13=0 ;// from location: room5 (at2_14) to location: room5(at3_13)    distance:0
//r1 velocity:1.0
const int travelr1at2_11=9 ;// from location: l1 (robot initial loc) to location: room4 (at2_11)    distance:9
const int travelr1at3_4=11 ;// from location: room4 (at2_11) to location: room2(at3_4)    distance:11
const int travelr1at3_7=3 ;// from location: room2 (at3_4) to location: room3(at3_7)    distance:3
const int travelr1at4_3=3 ;// from location: room3 (at3_7) to location: room2(at4_3)    distance:3
const int travelr1at2_8=3 ;// from location: room2 (at4_3) to location: room3(at2_8)    distance:3
const int travelr1at4_9=6 ;// from location: room3 (at2_8) to location: room4(at4_9)    distance:6
const int travelr1at4_6=6 ;// from location: room4 (at4_9) to location: room3(at4_6)    distance:6
const int travelr1at2_5=3 ;// from location: room3 (at4_6) to location: room2(at2_5)    distance:3
const int r3at3_10Time=6;
const int r3at4_12Time=1;
const int r3at2_14Time=6;
const int r3at3_13Time=6;
const int r1at2_11Time=5;
const int r1at3_4Time=5;
const int r1at3_7Time=5;
const int r1at4_3Time=1;
const int r1at2_8Time=5;
const int r1at4_9Time=1;
const int r1at4_6Time=1;
const int r1at2_5Time=5;
const int maxIdler3=20;
const int maxIdler1=20;

formula done=(r3order=4&r1order=8);

//formulae for ordered tasks
formula r1at4_6Done = r1order>=7 ;
formula r1at4_9Done = r1order>=6 ;
formula r1at4_3Done = r1order>=4 ;
formula r3at4_12Done = r3order>=2 ;


//formulae for consecutive tasks




module r3
 r3order:[0..4];
 r3time:[0..120];
 r3idleTime:[0..maxIdler3];
 [r3at3_10] r3order=0 & (r3time+r3at3_10Time+travelr3at3_10<=TT) & (r3time+travelr3at3_10 >= r1time) & (r1at4_9Done) -> (r3order'=1) & (r3time'=r3time+r3at3_10Time+travelr3at3_10);
 [r3at4_12] r3order=1 & (r3time+r3at4_12Time+travelr3at4_12<=TT) -> (r3order'=2) & (r3time'=r3time+r3at4_12Time+travelr3at4_12);
 [r3at2_14] r3order=2 & (r3time+r3at2_14Time+travelr3at2_14<=TT) & (r3time+travelr3at2_14 >= r3time) & (r3at4_12Done) -> (r3order'=3) & (r3time'=r3time+r3at2_14Time+travelr3at2_14);
 [r3at3_13] r3order=3 & (r3time+r3at3_13Time+travelr3at3_13<=TT) & (r3time+travelr3at3_13 >= r3time) & (r3at4_12Done) -> (r3order'=4) & (r3time'=r3time+r3at3_13Time+travelr3at3_13);
 [r3idle] r3order!=4 & (r3time+1<=TT) & (r3idleTime+1<=maxIdler3) -> (r3time'=r3time+1) & (r3idleTime'=r3idleTime+1);
endmodule

module r1
 r1order:[0..8];
 r1time:[0..120];
 r1idleTime:[0..maxIdler1];
 [r1at2_11] r1order=0 & (r1time+r1at2_11Time+travelr1at2_11<=TT) & (r1time+travelr1at2_11 >= r1time) & (r1at4_9Done) -> (r1order'=1) & (r1time'=r1time+r1at2_11Time+travelr1at2_11);
 [r1at3_4] r1order=1 & (r1time+r1at3_4Time+travelr1at3_4<=TT) & (r1time+travelr1at3_4 >= r1time) & (r1at4_3Done) -> (r1order'=2) & (r1time'=r1time+r1at3_4Time+travelr1at3_4);
 [r1at3_7] r1order=2 & (r1time+r1at3_7Time+travelr1at3_7<=TT) & (r1time+travelr1at3_7 >= r1time) & (r1at4_6Done) -> (r1order'=3) & (r1time'=r1time+r1at3_7Time+travelr1at3_7);
 [r1at4_3] r1order=3 & (r1time+r1at4_3Time+travelr1at4_3<=TT) -> (r1order'=4) & (r1time'=r1time+r1at4_3Time+travelr1at4_3);
 [r1at2_8] r1order=4 & (r1time+r1at2_8Time+travelr1at2_8<=TT) & (r1time+travelr1at2_8 >= r1time) & (r1at4_6Done) -> (r1order'=5) & (r1time'=r1time+r1at2_8Time+travelr1at2_8);
 [r1at4_9] r1order=5 & (r1time+r1at4_9Time+travelr1at4_9<=TT) -> (r1order'=6) & (r1time'=r1time+r1at4_9Time+travelr1at4_9);
 [r1at4_6] r1order=6 & (r1time+r1at4_6Time+travelr1at4_6<=TT) -> (r1order'=7) & (r1time'=r1time+r1at4_6Time+travelr1at4_6);
 [r1at2_5] r1order=7 & (r1time+r1at2_5Time+travelr1at2_5<=TT) & (r1time+travelr1at2_5 >= r1time) & (r1at4_3Done) -> (r1order'=8) & (r1time'=r1time+r1at2_5Time+travelr1at2_5);
 [r1idle] r1order!=8 & (r1time+1<=TT) & (r1idleTime+1<=maxIdler1) -> (r1time'=r1time+1) & (r1idleTime'=r1idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r3idle] true: 1;
 [r1idle] true: 1;
endrewards



