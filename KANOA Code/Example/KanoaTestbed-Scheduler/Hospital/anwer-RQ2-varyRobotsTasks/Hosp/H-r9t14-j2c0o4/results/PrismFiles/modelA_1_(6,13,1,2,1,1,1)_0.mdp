mdp

const int TT=120;//total time available 

//r2 velocity:1.0
const int travelr2at3_7=2 ;// from location: l2 (robot initial loc) to location: room3 (at3_7)    distance:2
const int travelr2at3_4=3 ;// from location: room3 (at3_7) to location: room2(at3_4)    distance:3
const int travelr2at3_10=11 ;// from location: room2 (at3_4) to location: room4(at3_10)    distance:11
//r3 velocity:2.0
const int travelr3at4_12=3 ;// from location: l3 (robot initial loc) to location: room5 (at4_12)    distance:5
const int travelr3at4_9=2 ;// from location: room5 (at4_12) to location: room4(at4_9)    distance:4
const int travelr3at2_14=2 ;// from location: room4 (at4_9) to location: room5(at2_14)    distance:4
const int travelr3at3_13=0 ;// from location: room5 (at2_14) to location: room5(at3_13)    distance:0
//r7 velocity:2.0
const int travelr7at2_5=3 ;// from location: l3 (robot initial loc) to location: room2 (at2_5)    distance:5
const int travelr7at2_8=2 ;// from location: room2 (at2_5) to location: room3(at2_8)    distance:3
//r8 velocity:2.0
const int travelr8at4_3=3 ;// from location: l3 (robot initial loc) to location: room2 (at4_3)    distance:5
const int travelr8at4_6=2 ;// from location: room2 (at4_3) to location: room3(at4_6)    distance:3
//r9 velocity:2.0
const int travelr9at2_11=4 ;// from location: l3 (robot initial loc) to location: room4 (at2_11)    distance:8
const int r2at3_7Time=4;
const int r2at3_4Time=4;
const int r2at3_10Time=4;
const int r3at4_12Time=1;
const int r3at4_9Time=1;
const int r3at2_14Time=6;
const int r3at3_13Time=6;
const int r7at2_5Time=6;
const int r7at2_8Time=6;
const int r8at4_3Time=1;
const int r8at4_6Time=1;
const int r9at2_11Time=6;
const int maxIdler2=20;
const int maxIdler3=20;
const int maxIdler7=20;
const int maxIdler8=20;
const int maxIdler9=20;

formula done=(r2order=3&r3order=4&r7order=2&r8order=2&r9order=1);

//formulae for ordered tasks
formula r8at4_6Done = r8order>=2 ;
formula r3at4_9Done = r3order>=2 ;
formula r8at4_3Done = r8order>=1 ;
formula r3at4_12Done = r3order>=1 ;


//formulae for consecutive tasks




module r2
 r2order:[0..3];
 r2time:[0..120];
 r2idleTime:[0..maxIdler2];
 [r2at3_7] r2order=0 & (r2time+r2at3_7Time+travelr2at3_7<=TT) & (r2time+travelr2at3_7 >= r8time) & (r8at4_6Done) -> (r2order'=1) & (r2time'=r2time+r2at3_7Time+travelr2at3_7);
 [r2at3_4] r2order=1 & (r2time+r2at3_4Time+travelr2at3_4<=TT) & (r2time+travelr2at3_4 >= r8time) & (r8at4_3Done) -> (r2order'=2) & (r2time'=r2time+r2at3_4Time+travelr2at3_4);
 [r2at3_10] r2order=2 & (r2time+r2at3_10Time+travelr2at3_10<=TT) & (r2time+travelr2at3_10 >= r3time) & (r3at4_9Done) -> (r2order'=3) & (r2time'=r2time+r2at3_10Time+travelr2at3_10);
 [r2idle] r2order!=3 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

module r3
 r3order:[0..4];
 r3time:[0..120];
 r3idleTime:[0..maxIdler3];
 [r3at4_12] r3order=0 & (r3time+r3at4_12Time+travelr3at4_12<=TT) -> (r3order'=1) & (r3time'=r3time+r3at4_12Time+travelr3at4_12);
 [r3at4_9] r3order=1 & (r3time+r3at4_9Time+travelr3at4_9<=TT) -> (r3order'=2) & (r3time'=r3time+r3at4_9Time+travelr3at4_9);
 [r3at2_14] r3order=2 & (r3time+r3at2_14Time+travelr3at2_14<=TT) & (r3time+travelr3at2_14 >= r3time) & (r3at4_12Done) -> (r3order'=3) & (r3time'=r3time+r3at2_14Time+travelr3at2_14);
 [r3at3_13] r3order=3 & (r3time+r3at3_13Time+travelr3at3_13<=TT) & (r3time+travelr3at3_13 >= r3time) & (r3at4_12Done) -> (r3order'=4) & (r3time'=r3time+r3at3_13Time+travelr3at3_13);
 [r3idle] r3order!=4 & (r3time+1<=TT) & (r3idleTime+1<=maxIdler3) -> (r3time'=r3time+1) & (r3idleTime'=r3idleTime+1);
endmodule

module r7
 r7order:[0..2];
 r7time:[0..120];
 r7idleTime:[0..maxIdler7];
 [r7at2_5] r7order=0 & (r7time+r7at2_5Time+travelr7at2_5<=TT) & (r7time+travelr7at2_5 >= r8time) & (r8at4_3Done) -> (r7order'=1) & (r7time'=r7time+r7at2_5Time+travelr7at2_5);
 [r7at2_8] r7order=1 & (r7time+r7at2_8Time+travelr7at2_8<=TT) & (r7time+travelr7at2_8 >= r8time) & (r8at4_6Done) -> (r7order'=2) & (r7time'=r7time+r7at2_8Time+travelr7at2_8);
 [r7idle] r7order!=2 & (r7time+1<=TT) & (r7idleTime+1<=maxIdler7) -> (r7time'=r7time+1) & (r7idleTime'=r7idleTime+1);
endmodule

module r8
 r8order:[0..2];
 r8time:[0..120];
 r8idleTime:[0..maxIdler8];
 [r8at4_3] r8order=0 & (r8time+r8at4_3Time+travelr8at4_3<=TT) -> (r8order'=1) & (r8time'=r8time+r8at4_3Time+travelr8at4_3);
 [r8at4_6] r8order=1 & (r8time+r8at4_6Time+travelr8at4_6<=TT) -> (r8order'=2) & (r8time'=r8time+r8at4_6Time+travelr8at4_6);
 [r8idle] r8order!=2 & (r8time+1<=TT) & (r8idleTime+1<=maxIdler8) -> (r8time'=r8time+1) & (r8idleTime'=r8idleTime+1);
endmodule

module r9
 r9order:[0..1];
 r9time:[0..120];
 r9idleTime:[0..maxIdler9];
 [r9at2_11] r9order=0 & (r9time+r9at2_11Time+travelr9at2_11<=TT) & (r9time+travelr9at2_11 >= r3time) & (r3at4_9Done) -> (r9order'=1) & (r9time'=r9time+r9at2_11Time+travelr9at2_11);
 [r9idle] r9order!=1 & (r9time+1<=TT) & (r9idleTime+1<=maxIdler9) -> (r9time'=r9time+1) & (r9idleTime'=r9idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
 [r3idle] true: 1;
 [r7idle] true: 1;
 [r8idle] true: 1;
 [r9idle] true: 1;
endrewards



