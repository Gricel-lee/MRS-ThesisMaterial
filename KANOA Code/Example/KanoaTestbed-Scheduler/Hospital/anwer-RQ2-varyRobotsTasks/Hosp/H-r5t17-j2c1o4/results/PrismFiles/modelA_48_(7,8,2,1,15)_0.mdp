mdp

const int TT=120;//total time available 

//r2 velocity:1.0
const int travelr2at2_8=2 ;// from location: l2 (robot initial loc) to location: room3 (at2_8)    distance:2
const int travelr2at4_9=6 ;// from location: room3 (at2_8) to location: room4(at4_9)    distance:6
const int travelr2at4_6=6 ;// from location: room4 (at4_9) to location: room3(at4_6)    distance:6
const int travelr2at3_10=6 ;// from location: room3 (at4_6) to location: room4(at3_10)    distance:6
//r3 velocity:2.0
const int travelr3at4_12=3 ;// from location: l3 (robot initial loc) to location: room5 (at4_12)    distance:5
const int travelr3at2_14=0 ;// from location: room5 (at4_12) to location: room5(at2_14)    distance:0
const int travelr3at3_13=0 ;// from location: room5 (at2_14) to location: room5(at3_13)    distance:0
const int travelr3at2_11=2 ;// from location: room5 (at3_13) to location: room4(at2_11)    distance:4
//r1 velocity:1.0
const int travelr1at2_5=6 ;// from location: l1 (robot initial loc) to location: room2 (at2_5)    distance:6
const int travelr1at4_3=0 ;// from location: room2 (at2_5) to location: room2(at4_3)    distance:0
const int travelr1at3_4=0 ;// from location: room2 (at4_3) to location: room2(at3_4)    distance:0
const int travelr1at3_7=3 ;// from location: room2 (at3_4) to location: room3(at3_7)    distance:3
const int r2at2_8Time=5;
const int r2at4_9Time=1;
const int r2at4_6Time=1;
const int r2at3_10Time=4;
const int r3at4_12Time=1;
const int r3at2_14Time=6;
const int r3at3_13Time=6;
const int r3at2_11Time=6;
const int r1at2_5Time=5;
const int r1at4_3Time=1;
const int r1at3_4Time=5;
const int r1at3_7Time=5;
const int maxIdler2=20;
const int maxIdler3=20;
const int maxIdler1=20;

formula done=(r2order=4&r3order=4&r1order=4);

//formulae for ordered tasks


//formulae for consecutive tasks
formula r3at3_13Just = r3order=3 ;
formula r2at4_6Just = r2order=3 ;
formula r1at3_7Just = r1order=4 ;
formula r2at4_9Just = r2order=2 ;
formula r1at4_3Just = r1order=2 ;
formula r1at3_4Just = r1order=3 ;
formula r3at4_12Just = r3order=1 ;
formula r2at3_10Just = r2order=4 ;




module r2
 r2order:[0..4];
 r2time:[0..120];
 r2idleTime:[0..maxIdler2];
 [r2at2_8] r2order=0 & (r2time+r2at2_8Time+travelr2at2_8<=TT)& (r1at3_7Just) & (r2time+travelr2at2_8 = r1time) -> (r2order'=1) & (r2time'=r2time+r2at2_8Time+travelr2at2_8);
 [r2at4_9] r2order=1 & (r2time+r2at4_9Time+travelr2at4_9<=TT) -> (r2order'=2) & (r2time'=r2time+r2at4_9Time+travelr2at4_9);
 [r2at4_6] r2order=2 & (r2time+r2at4_6Time+travelr2at4_6<=TT) -> (r2order'=3) & (r2time'=r2time+r2at4_6Time+travelr2at4_6);
 [r2at3_10] r2order=3 & (r2time+r2at3_10Time+travelr2at3_10<=TT)& (r2at4_9Just) & (r2time+travelr2at3_10 = r2time) -> (r2order'=4) & (r2time'=r2time+r2at3_10Time+travelr2at3_10);
 [r2idle] r2order!=4 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

module r3
 r3order:[0..4];
 r3time:[0..120];
 r3idleTime:[0..maxIdler3];
 [r3at4_12] r3order=0 & (r3time+r3at4_12Time+travelr3at4_12<=TT) -> (r3order'=1) & (r3time'=r3time+r3at4_12Time+travelr3at4_12);
 [r3at2_14] r3order=1 & (r3time+r3at2_14Time+travelr3at2_14<=TT)& (r3at3_13Just) & (r3time+travelr3at2_14 = r3time) -> (r3order'=2) & (r3time'=r3time+r3at2_14Time+travelr3at2_14);
 [r3at3_13] r3order=2 & (r3time+r3at3_13Time+travelr3at3_13<=TT)& (r3at4_12Just) & (r3time+travelr3at3_13 = r3time) -> (r3order'=3) & (r3time'=r3time+r3at3_13Time+travelr3at3_13);
 [r3at2_11] r3order=3 & (r3time+r3at2_11Time+travelr3at2_11<=TT)& (r2at3_10Just) & (r3time+travelr3at2_11 = r2time) -> (r3order'=4) & (r3time'=r3time+r3at2_11Time+travelr3at2_11);
 [r3idle] r3order!=4 & (r3time+1<=TT) & (r3idleTime+1<=maxIdler3) -> (r3time'=r3time+1) & (r3idleTime'=r3idleTime+1);
endmodule

module r1
 r1order:[0..4];
 r1time:[0..120];
 r1idleTime:[0..maxIdler1];
 [r1at2_5] r1order=0 & (r1time+r1at2_5Time+travelr1at2_5<=TT)& (r1at3_4Just) & (r1time+travelr1at2_5 = r1time) -> (r1order'=1) & (r1time'=r1time+r1at2_5Time+travelr1at2_5);
 [r1at4_3] r1order=1 & (r1time+r1at4_3Time+travelr1at4_3<=TT) -> (r1order'=2) & (r1time'=r1time+r1at4_3Time+travelr1at4_3);
 [r1at3_4] r1order=2 & (r1time+r1at3_4Time+travelr1at3_4<=TT)& (r1at4_3Just) & (r1time+travelr1at3_4 = r1time) -> (r1order'=3) & (r1time'=r1time+r1at3_4Time+travelr1at3_4);
 [r1at3_7] r1order=3 & (r1time+r1at3_7Time+travelr1at3_7<=TT)& (r2at4_6Just) & (r1time+travelr1at3_7 = r2time) -> (r1order'=4) & (r1time'=r1time+r1at3_7Time+travelr1at3_7);
 [r1idle] r1order!=4 & (r1time+1<=TT) & (r1idleTime+1<=maxIdler1) -> (r1time'=r1time+1) & (r1idleTime'=r1idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
 [r3idle] true: 1;
 [r1idle] true: 1;
endrewards



