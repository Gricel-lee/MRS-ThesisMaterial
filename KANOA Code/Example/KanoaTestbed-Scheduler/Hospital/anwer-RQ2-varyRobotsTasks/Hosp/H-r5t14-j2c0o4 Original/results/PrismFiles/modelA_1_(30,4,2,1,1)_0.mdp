mdp

const int TT=120;//total time available 

//r2 velocity:1.0
const int travelr2at4_9=8 ;// from location: l2 (robot initial loc) to location: room4 (at4_9)    distance:8
const int travelr2at4_3=11 ;// from location: room4 (at4_9) to location: room2(at4_3)    distance:11
const int travelr2at2_11=11 ;// from location: room2 (at4_3) to location: room4(at2_11)    distance:11
const int travelr2at3_7=6 ;// from location: room4 (at2_11) to location: room3(at3_7)    distance:6
const int travelr2at2_8=0 ;// from location: room3 (at3_7) to location: room3(at2_8)    distance:0
const int travelr2at2_5=3 ;// from location: room3 (at2_8) to location: room2(at2_5)    distance:3
//r1 velocity:1.0
const int travelr1at3_4=6 ;// from location: l1 (robot initial loc) to location: room2 (at3_4)    distance:6
const int travelr1at4_6=3 ;// from location: room2 (at3_4) to location: room3(at4_6)    distance:3
const int travelr1at3_10=6 ;// from location: room3 (at4_6) to location: room4(at3_10)    distance:6
const int r2at4_9Time=1;
const int r2at4_3Time=1;
const int r2at2_11Time=5;
const int r2at3_7Time=4;
const int r2at2_8Time=5;
const int r2at2_5Time=5;
const int r1at3_4Time=5;
const int r1at4_6Time=1;
const int r1at3_10Time=5;
const int maxIdler2=20;
const int maxIdler1=20;

formula done=(r2order=6&r1order=3);

//formulae for ordered tasks
formula r1at4_6Done = r1order>=2 ;
formula r2at4_9Done = r2order>=1 ;
formula r2at4_3Done = r2order>=2 ;


//formulae for consecutive tasks




module r2
 r2order:[0..6];
 r2time:[0..120];
 r2idleTime:[0..maxIdler2];
 [r2at4_9] r2order=0 & (r2time+r2at4_9Time+travelr2at4_9<=TT) -> (r2order'=1) & (r2time'=r2time+r2at4_9Time+travelr2at4_9);
 [r2at4_3] r2order=1 & (r2time+r2at4_3Time+travelr2at4_3<=TT) -> (r2order'=2) & (r2time'=r2time+r2at4_3Time+travelr2at4_3);
 [r2at2_11] r2order=2 & (r2time+r2at2_11Time+travelr2at2_11<=TT) & (r2time+travelr2at2_11 >= r2time) & (r2at4_9Done) -> (r2order'=3) & (r2time'=r2time+r2at2_11Time+travelr2at2_11);
 [r2at3_7] r2order=3 & (r2time+r2at3_7Time+travelr2at3_7<=TT) & (r2time+travelr2at3_7 >= r1time) & (r1at4_6Done) -> (r2order'=4) & (r2time'=r2time+r2at3_7Time+travelr2at3_7);
 [r2at2_8] r2order=4 & (r2time+r2at2_8Time+travelr2at2_8<=TT) & (r2time+travelr2at2_8 >= r1time) & (r1at4_6Done) -> (r2order'=5) & (r2time'=r2time+r2at2_8Time+travelr2at2_8);
 [r2at2_5] r2order=5 & (r2time+r2at2_5Time+travelr2at2_5<=TT) & (r2time+travelr2at2_5 >= r2time) & (r2at4_3Done) -> (r2order'=6) & (r2time'=r2time+r2at2_5Time+travelr2at2_5);
 [r2idle] r2order!=6 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

module r1
 r1order:[0..3];
 r1time:[0..120];
 r1idleTime:[0..maxIdler1];
 [r1at3_4] r1order=0 & (r1time+r1at3_4Time+travelr1at3_4<=TT) & (r1time+travelr1at3_4 >= r2time) & (r2at4_3Done) -> (r1order'=1) & (r1time'=r1time+r1at3_4Time+travelr1at3_4);
 [r1at4_6] r1order=1 & (r1time+r1at4_6Time+travelr1at4_6<=TT) -> (r1order'=2) & (r1time'=r1time+r1at4_6Time+travelr1at4_6);
 [r1at3_10] r1order=2 & (r1time+r1at3_10Time+travelr1at3_10<=TT) & (r1time+travelr1at3_10 >= r2time) & (r2at4_9Done) -> (r1order'=3) & (r1time'=r1time+r1at3_10Time+travelr1at3_10);
 [r1idle] r1order!=3 & (r1time+1<=TT) & (r1idleTime+1<=maxIdler1) -> (r1time'=r1time+1) & (r1idleTime'=r1idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
 [r1idle] true: 1;
endrewards



