mdp

const int TT=120;//total time available 

//r4 velocity:2.0
const int travelr4at1_1=4 ;// from location: l4 (robot initial loc) to location: room1 (at1_1)    distance:8
const int travelr4at11_2=4 ;// from location: room1 (at1_1) to location: room6(at11_2)    distance:8
//r5 velocity:2.0
const int travelr5at11_2=1 ;// from location: l5 (robot initial loc) to location: room6 (at11_2)    distance:1
//r6 velocity:2.0
const int travelr6at11_2=1 ;// from location: l5 (robot initial loc) to location: room6 (at11_2)    distance:1
//r7 velocity:2.0
const int travelr7at11_2=1 ;// from location: l5 (robot initial loc) to location: room6 (at11_2)    distance:1
const int r4at1_1Time=4;
const int r4at11_2Time=4;
const int r5at11_2Time=4;
const int r6at11_2Time=4;
const int r7at11_2Time=4;
const int maxIdler4=20;
const int maxIdler5=20;
const int maxIdler6=20;
const int maxIdler7=20;

formula done=(r4order=2&r5order=1&r6order=1&r7order=1);

//formulae for ordered tasks


//formulae for consecutive tasks




module r4
 r4order:[0..2];
 r4time:[0..120];
 r4idleTime:[0..maxIdler4];
 [r4at1_1] r4order=0 & (r4time+r4at1_1Time+travelr4at1_1<=TT)& (r4time+travelr4at1_1 >= 10) -> (r4order'=1) & (r4time'=r4time+r4at1_1Time+travelr4at1_1);
 [at11_2] r4order=1 & (r4time+r4at11_2Time+travelr4at11_2<=TT) & (r4time+travelr4at11_2 = r5time+travelr5at11_2) & (r4time+travelr4at11_2 = r6time+travelr6at11_2) & (r4time+travelr4at11_2 = r7time+travelr7at11_2) -> (r4order'=2) & (r4time'=r4time+r4at11_2Time+travelr4at11_2);
 [r4idle] r4order!=2 & (r4time+1<=TT) & (r4idleTime+1<=maxIdler4) -> (r4time'=r4time+1) & (r4idleTime'=r4idleTime+1);
endmodule

module r5
 r5order:[0..1];
 r5time:[0..120];
 r5idleTime:[0..maxIdler5];
 [at11_2] r5order=0 & (r5time+r5at11_2Time+travelr5at11_2<=TT) & (r5time+travelr5at11_2 = r4time+travelr4at11_2) & (r5time+travelr5at11_2 = r6time+travelr6at11_2) & (r5time+travelr5at11_2 = r7time+travelr7at11_2) -> (r5order'=1) & (r5time'=r5time+r5at11_2Time+travelr5at11_2);
 [r5idle] r5order!=1 & (r5time+1<=TT) & (r5idleTime+1<=maxIdler5) -> (r5time'=r5time+1) & (r5idleTime'=r5idleTime+1);
endmodule

module r6
 r6order:[0..1];
 r6time:[0..120];
 r6idleTime:[0..maxIdler6];
 [at11_2] r6order=0 & (r6time+r6at11_2Time+travelr6at11_2<=TT) & (r6time+travelr6at11_2 = r4time+travelr4at11_2) & (r6time+travelr6at11_2 = r5time+travelr5at11_2) & (r6time+travelr6at11_2 = r7time+travelr7at11_2) -> (r6order'=1) & (r6time'=r6time+r6at11_2Time+travelr6at11_2);
 [r6idle] r6order!=1 & (r6time+1<=TT) & (r6idleTime+1<=maxIdler6) -> (r6time'=r6time+1) & (r6idleTime'=r6idleTime+1);
endmodule

module r7
 r7order:[0..1];
 r7time:[0..120];
 r7idleTime:[0..maxIdler7];
 [at11_2] r7order=0 & (r7time+r7at11_2Time+travelr7at11_2<=TT) & (r7time+travelr7at11_2 = r4time+travelr4at11_2) & (r7time+travelr7at11_2 = r5time+travelr5at11_2) & (r7time+travelr7at11_2 = r6time+travelr6at11_2) -> (r7order'=1) & (r7time'=r7time+r7at11_2Time+travelr7at11_2);
 [r7idle] r7order!=1 & (r7time+1<=TT) & (r7idleTime+1<=maxIdler7) -> (r7time'=r7time+1) & (r7idleTime'=r7idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r4idle] true: 1;
 [r5idle] true: 1;
 [r6idle] true: 1;
 [r7idle] true: 1;
endrewards



 //at1_1 start time: 10.0
