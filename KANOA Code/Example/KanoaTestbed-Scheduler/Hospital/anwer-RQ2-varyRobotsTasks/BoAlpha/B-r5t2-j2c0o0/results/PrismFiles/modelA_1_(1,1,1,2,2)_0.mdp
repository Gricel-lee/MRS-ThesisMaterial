mdp

const int TT=700;//total time available 

//r2 velocity:1.0
const int travelr2at1Rock_1=22 ;// from location: l3d (robot initial loc) to location: l1c (at1Rock_1)    distance:22
const int travelr2at2Rock_2=0 ;// from location: l1c (at1Rock_1) to location: l1c(at2Rock_2)    distance:0
//r3 velocity:3.0
const int travelr3at1Rock_1=8 ;// from location: l3d (robot initial loc) to location: l1c (at1Rock_1)    distance:22
const int travelr3at2Rock_2=0 ;// from location: l1c (at1Rock_1) to location: l1c(at2Rock_2)    distance:0
//r4 velocity:1.0
const int travelr4at1Rock_1=22 ;// from location: l3d (robot initial loc) to location: l1c (at1Rock_1)    distance:22
const int travelr4at2Rock_2=0 ;// from location: l1c (at1Rock_1) to location: l1c(at2Rock_2)    distance:0
//r5 velocity:1.0
const int travelr5at2Rock_2=22 ;// from location: l3d (robot initial loc) to location: l1c (at2Rock_2)    distance:22
const int travelr5at1Rock_1=0 ;// from location: l1c (at2Rock_2) to location: l1c(at1Rock_1)    distance:0
//r1 velocity:1.0
const int travelr1at2Rock_2=22 ;// from location: l3d (robot initial loc) to location: l1c (at2Rock_2)    distance:22
const int travelr1at1Rock_1=0 ;// from location: l1c (at2Rock_2) to location: l1c(at1Rock_1)    distance:0
const int r2at1Rock_1Time=16;
const int r2at2Rock_2Time=12;
const int r3at1Rock_1Time=10;
const int r3at2Rock_2Time=10;
const int r4at1Rock_1Time=16;
const int r4at2Rock_2Time=12;
const int r5at2Rock_2Time=12;
const int r5at1Rock_1Time=16;
const int r1at2Rock_2Time=17;
const int r1at1Rock_1Time=18;
const int maxIdler2=20;
const int maxIdler3=20;
const int maxIdler4=20;
const int maxIdler5=20;
const int maxIdler1=20;

formula done=(r2order=2&r3order=2&r4order=2&r5order=2&r1order=2);

//formulae for ordered tasks


//formulae for consecutive tasks




module r2
 r2order:[0..2];
 r2time:[0..700];
 r2idleTime:[0..maxIdler2];
 [at1Rock_1] r2order=0 & (r2time+r2at1Rock_1Time+travelr2at1Rock_1<=TT) & (r2time+travelr2at1Rock_1 = r3time+travelr3at1Rock_1) & (r2time+travelr2at1Rock_1 = r4time+travelr4at1Rock_1) & (r2time+travelr2at1Rock_1 = r5time+travelr5at1Rock_1) & (r2time+travelr2at1Rock_1 = r1time+travelr1at1Rock_1) -> (r2order'=1) & (r2time'=r2time+r2at1Rock_1Time+travelr2at1Rock_1);
 [at2Rock_2] r2order=1 & (r2time+r2at2Rock_2Time+travelr2at2Rock_2<=TT) & (r2time+travelr2at2Rock_2 = r3time+travelr3at2Rock_2) & (r2time+travelr2at2Rock_2 = r4time+travelr4at2Rock_2) & (r2time+travelr2at2Rock_2 = r5time+travelr5at2Rock_2) & (r2time+travelr2at2Rock_2 = r1time+travelr1at2Rock_2) -> (r2order'=2) & (r2time'=r2time+r2at2Rock_2Time+travelr2at2Rock_2);
 [r2idle] r2order!=2 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

module r3
 r3order:[0..2];
 r3time:[0..700];
 r3idleTime:[0..maxIdler3];
 [at1Rock_1] r3order=0 & (r3time+r3at1Rock_1Time+travelr3at1Rock_1<=TT) & (r3time+travelr3at1Rock_1 = r2time+travelr2at1Rock_1) & (r3time+travelr3at1Rock_1 = r4time+travelr4at1Rock_1) & (r3time+travelr3at1Rock_1 = r5time+travelr5at1Rock_1) & (r3time+travelr3at1Rock_1 = r1time+travelr1at1Rock_1) -> (r3order'=1) & (r3time'=r3time+r3at1Rock_1Time+travelr3at1Rock_1);
 [at2Rock_2] r3order=1 & (r3time+r3at2Rock_2Time+travelr3at2Rock_2<=TT) & (r3time+travelr3at2Rock_2 = r2time+travelr2at2Rock_2) & (r3time+travelr3at2Rock_2 = r4time+travelr4at2Rock_2) & (r3time+travelr3at2Rock_2 = r5time+travelr5at2Rock_2) & (r3time+travelr3at2Rock_2 = r1time+travelr1at2Rock_2) -> (r3order'=2) & (r3time'=r3time+r3at2Rock_2Time+travelr3at2Rock_2);
 [r3idle] r3order!=2 & (r3time+1<=TT) & (r3idleTime+1<=maxIdler3) -> (r3time'=r3time+1) & (r3idleTime'=r3idleTime+1);
endmodule

module r4
 r4order:[0..2];
 r4time:[0..700];
 r4idleTime:[0..maxIdler4];
 [at1Rock_1] r4order=0 & (r4time+r4at1Rock_1Time+travelr4at1Rock_1<=TT) & (r4time+travelr4at1Rock_1 = r2time+travelr2at1Rock_1) & (r4time+travelr4at1Rock_1 = r3time+travelr3at1Rock_1) & (r4time+travelr4at1Rock_1 = r5time+travelr5at1Rock_1) & (r4time+travelr4at1Rock_1 = r1time+travelr1at1Rock_1) -> (r4order'=1) & (r4time'=r4time+r4at1Rock_1Time+travelr4at1Rock_1);
 [at2Rock_2] r4order=1 & (r4time+r4at2Rock_2Time+travelr4at2Rock_2<=TT) & (r4time+travelr4at2Rock_2 = r2time+travelr2at2Rock_2) & (r4time+travelr4at2Rock_2 = r3time+travelr3at2Rock_2) & (r4time+travelr4at2Rock_2 = r5time+travelr5at2Rock_2) & (r4time+travelr4at2Rock_2 = r1time+travelr1at2Rock_2) -> (r4order'=2) & (r4time'=r4time+r4at2Rock_2Time+travelr4at2Rock_2);
 [r4idle] r4order!=2 & (r4time+1<=TT) & (r4idleTime+1<=maxIdler4) -> (r4time'=r4time+1) & (r4idleTime'=r4idleTime+1);
endmodule

module r5
 r5order:[0..2];
 r5time:[0..700];
 r5idleTime:[0..maxIdler5];
 [at2Rock_2] r5order=0 & (r5time+r5at2Rock_2Time+travelr5at2Rock_2<=TT) & (r5time+travelr5at2Rock_2 = r2time+travelr2at2Rock_2) & (r5time+travelr5at2Rock_2 = r3time+travelr3at2Rock_2) & (r5time+travelr5at2Rock_2 = r4time+travelr4at2Rock_2) & (r5time+travelr5at2Rock_2 = r1time+travelr1at2Rock_2) -> (r5order'=1) & (r5time'=r5time+r5at2Rock_2Time+travelr5at2Rock_2);
 [at1Rock_1] r5order=1 & (r5time+r5at1Rock_1Time+travelr5at1Rock_1<=TT) & (r5time+travelr5at1Rock_1 = r2time+travelr2at1Rock_1) & (r5time+travelr5at1Rock_1 = r3time+travelr3at1Rock_1) & (r5time+travelr5at1Rock_1 = r4time+travelr4at1Rock_1) & (r5time+travelr5at1Rock_1 = r1time+travelr1at1Rock_1) -> (r5order'=2) & (r5time'=r5time+r5at1Rock_1Time+travelr5at1Rock_1);
 [r5idle] r5order!=2 & (r5time+1<=TT) & (r5idleTime+1<=maxIdler5) -> (r5time'=r5time+1) & (r5idleTime'=r5idleTime+1);
endmodule

module r1
 r1order:[0..2];
 r1time:[0..700];
 r1idleTime:[0..maxIdler1];
 [at2Rock_2] r1order=0 & (r1time+r1at2Rock_2Time+travelr1at2Rock_2<=TT) & (r1time+travelr1at2Rock_2 = r2time+travelr2at2Rock_2) & (r1time+travelr1at2Rock_2 = r3time+travelr3at2Rock_2) & (r1time+travelr1at2Rock_2 = r4time+travelr4at2Rock_2) & (r1time+travelr1at2Rock_2 = r5time+travelr5at2Rock_2) -> (r1order'=1) & (r1time'=r1time+r1at2Rock_2Time+travelr1at2Rock_2);
 [at1Rock_1] r1order=1 & (r1time+r1at1Rock_1Time+travelr1at1Rock_1<=TT) & (r1time+travelr1at1Rock_1 = r2time+travelr2at1Rock_1) & (r1time+travelr1at1Rock_1 = r3time+travelr3at1Rock_1) & (r1time+travelr1at1Rock_1 = r4time+travelr4at1Rock_1) & (r1time+travelr1at1Rock_1 = r5time+travelr5at1Rock_1) -> (r1order'=2) & (r1time'=r1time+r1at1Rock_1Time+travelr1at1Rock_1);
 [r1idle] r1order!=2 & (r1time+1<=TT) & (r1idleTime+1<=maxIdler1) -> (r1time'=r1time+1) & (r1idleTime'=r1idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
 [r3idle] true: 1;
 [r4idle] true: 1;
 [r5idle] true: 1;
 [r1idle] true: 1;
endrewards



