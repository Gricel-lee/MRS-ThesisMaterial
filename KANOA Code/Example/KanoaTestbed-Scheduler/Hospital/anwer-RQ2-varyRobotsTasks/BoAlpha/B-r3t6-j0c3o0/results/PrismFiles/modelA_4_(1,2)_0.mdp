mdp

const int TT=700;//total time available 

//r2 velocity:1.0
const int travelr2at1Rock_5=22 ;// from location: l3d (robot initial loc) to location: l2b (at1Rock_5)    distance:22
const int travelr2at2Rock_2=14 ;// from location: l2b (at1Rock_5) to location: l1c(at2Rock_2)    distance:14
//r1 velocity:1.0
const int travelr1at1Rock_3=32 ;// from location: l3d (robot initial loc) to location: l2a (at1Rock_3)    distance:32
const int travelr1at2Rock_6=10 ;// from location: l2a (at1Rock_3) to location: l2b(at2Rock_6)    distance:10
const int travelr1at2Rock_4=10 ;// from location: l2b (at2Rock_6) to location: l2a(at2Rock_4)    distance:10
const int travelr1at1Rock_1=22 ;// from location: l2a (at2Rock_4) to location: l1c(at1Rock_1)    distance:22
const int r2at1Rock_5Time=16;
const int r2at2Rock_2Time=12;
const int r1at1Rock_3Time=18;
const int r1at2Rock_6Time=17;
const int r1at2Rock_4Time=17;
const int r1at1Rock_1Time=18;
const int maxIdler2=20;
const int maxIdler1=20;

formula done=(r2order=2&r1order=4);

//formulae for ordered tasks


//formulae for consecutive tasks
formula r2at1Rock_5Just = r2order=1 ;
formula r1at1Rock_3Just = r1order=1 ;
formula r1at1Rock_1Just = r1order=4 ;




module r2
 r2order:[0..2];
 r2time:[0..700];
 r2idleTime:[0..maxIdler2];
 [r2at1Rock_5] r2order=0 & (r2time+r2at1Rock_5Time+travelr2at1Rock_5<=TT) -> (r2order'=1) & (r2time'=r2time+r2at1Rock_5Time+travelr2at1Rock_5);
 [r2at2Rock_2] r2order=1 & (r2time+r2at2Rock_2Time+travelr2at2Rock_2<=TT)& (r1at1Rock_1Just) & (r2time+travelr2at2Rock_2 = r1time) -> (r2order'=2) & (r2time'=r2time+r2at2Rock_2Time+travelr2at2Rock_2);
 [r2idle] r2order!=2 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

module r1
 r1order:[0..4];
 r1time:[0..700];
 r1idleTime:[0..maxIdler1];
 [r1at1Rock_3] r1order=0 & (r1time+r1at1Rock_3Time+travelr1at1Rock_3<=TT) -> (r1order'=1) & (r1time'=r1time+r1at1Rock_3Time+travelr1at1Rock_3);
 [r1at2Rock_6] r1order=1 & (r1time+r1at2Rock_6Time+travelr1at2Rock_6<=TT)& (r2at1Rock_5Just) & (r1time+travelr1at2Rock_6 = r2time) -> (r1order'=2) & (r1time'=r1time+r1at2Rock_6Time+travelr1at2Rock_6);
 [r1at2Rock_4] r1order=2 & (r1time+r1at2Rock_4Time+travelr1at2Rock_4<=TT)& (r1at1Rock_3Just) & (r1time+travelr1at2Rock_4 = r1time) -> (r1order'=3) & (r1time'=r1time+r1at2Rock_4Time+travelr1at2Rock_4);
 [r1at1Rock_1] r1order=3 & (r1time+r1at1Rock_1Time+travelr1at1Rock_1<=TT) -> (r1order'=4) & (r1time'=r1time+r1at1Rock_1Time+travelr1at1Rock_1);
 [r1idle] r1order!=4 & (r1time+1<=TT) & (r1idleTime+1<=maxIdler1) -> (r1time'=r1time+1) & (r1idleTime'=r1idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
 [r1idle] true: 1;
endrewards



