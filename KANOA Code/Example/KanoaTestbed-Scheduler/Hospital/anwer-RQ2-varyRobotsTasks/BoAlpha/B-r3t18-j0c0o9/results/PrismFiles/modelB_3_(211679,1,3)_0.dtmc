dtmc

const double p_travel_r2at1_7=1.0 ;// from location: l3d (robot initial loc) to location: l3d (at1_7)
const double p_travel_r2at1_9=1.0 ;// from location: l3d (at1_7) to location: l3e(at1_9)
const double p_travel_r2at1_11=1.0 ;// from location: l3e (at1_9) to location: l3f(at1_11)
const double p_travel_r2at2_10=1.0 ;// from location: l3f (at1_11) to location: l3e(at2_10)
const double p_travel_r2at2_8=1.0 ;// from location: l3e (at2_10) to location: l3d(at2_8)
const double p_travel_r2at2Rock_6=1.0 ;// from location: l3d (at2_8) to location: l2b(at2Rock_6)
const double p_travel_r2at2Rock_2=1.0 ;// from location: l2b (at2Rock_6) to location: l1c(at2Rock_2)
const double p_travel_r2at2_12=1.0 ;// from location: l1c (at2Rock_2) to location: l3f(at2_12)
const double p_travel_r2at2Rock_4=1.0 ;// from location: l3f (at2_12) to location: l2a(at2Rock_4)
const double p_travel_r1at1Rock_5=1.0 ;// from location: l3d (robot initial loc) to location: l2b (at1Rock_5)
const double p_travel_r1at1Rock_1=1.0 ;// from location: l2b (at1Rock_5) to location: l1c(at1Rock_1)
const double p_travel_r1at1Rock_3=1.0 ;// from location: l1c (at1Rock_1) to location: l2a(at1Rock_3)
const double p_r2at1_7=1.0 ;
const double p_r2at1_9=1.0 ;
const double p_r2at1_11=1.0 ;
const double p_r2at2_10=1.0 ;
const double p_r2at2_8=1.0 ;
const double p_r2at2Rock_6=0.99 ;
const double p_r2at2Rock_2=0.99 ;
const double p_r2at2_12=1.0 ;
const double p_r2at2Rock_4=0.99 ;
const double p_r1at1Rock_5=0.98 ;
const double p_r1at1Rock_1=0.98 ;
const double p_r1at1Rock_3=0.98 ;

formula done=(r2=45&r1=12);

module r2
 r2:[0..45];
 //travel to at1_7
 [r2travel_at1_7] r2=0->p_travel_r2at1_7:(r2'=2) + 1-p_travel_r2at1_7:(r2'=1);
 //try at1_7, retry allowed 3 times
 []r2=2 -> 1.0:(r2'=7) + 1-1.0:(r2'=3);
 []r2=3 -> 1.0:(r2'=7) + 1-1.0:(r2'=4);
 []r2=4 -> 1.0:(r2'=7) + 1-1.0:(r2'=5);
 []r2=5 -> 1.0:(r2'=7) + 1-1.0:(r2'=6); //fail task at r2=6
 //travel to at1_9
 [r2travel_at1_9] r2=7->p_travel_r2at1_9:(r2'=9) + 1-p_travel_r2at1_9:(r2'=8);
 //try at1_9, retry allowed 3 times
 []r2=9 -> 1.0:(r2'=14) + 1-1.0:(r2'=10);
 []r2=10 -> 1.0:(r2'=14) + 1-1.0:(r2'=11);
 []r2=11 -> 1.0:(r2'=14) + 1-1.0:(r2'=12);
 []r2=12 -> 1.0:(r2'=14) + 1-1.0:(r2'=13); //fail task at r2=13
 //travel to at1_11
 [r2travel_at1_11] r2=14->p_travel_r2at1_11:(r2'=16) + 1-p_travel_r2at1_11:(r2'=15);
 //try at1_11, retry allowed 3 times
 []r2=16 -> 1.0:(r2'=21) + 1-1.0:(r2'=17);
 []r2=17 -> 1.0:(r2'=21) + 1-1.0:(r2'=18);
 []r2=18 -> 1.0:(r2'=21) + 1-1.0:(r2'=19);
 []r2=19 -> 1.0:(r2'=21) + 1-1.0:(r2'=20); //fail task at r2=20
 //travel to at2_10
 [r2travel_at2_10] r2=21->p_travel_r2at2_10:(r2'=23) + 1-p_travel_r2at2_10:(r2'=22);
 //try at2_10, no retry allowed
 []r2=23 -> 1.0:(r2'=25) + 1-1.0:(r2'=24); //fail task at r2=24
 //travel to at2_8
 [r2travel_at2_8] r2=25->p_travel_r2at2_8:(r2'=27) + 1-p_travel_r2at2_8:(r2'=26);
 //try at2_8, no retry allowed
 []r2=27 -> 1.0:(r2'=29) + 1-1.0:(r2'=28); //fail task at r2=28
 //travel to at2Rock_6
 [r2travel_at2Rock_6] r2=29->p_travel_r2at2Rock_6:(r2'=31) + 1-p_travel_r2at2Rock_6:(r2'=30);
 //try at2Rock_6, no retry allowed
 []r2=31 -> 0.99:(r2'=33) + 1-0.99:(r2'=32); //fail task at r2=32
 //travel to at2Rock_2
 [r2travel_at2Rock_2] r2=33->p_travel_r2at2Rock_2:(r2'=35) + 1-p_travel_r2at2Rock_2:(r2'=34);
 //try at2Rock_2, no retry allowed
 []r2=35 -> 0.99:(r2'=37) + 1-0.99:(r2'=36); //fail task at r2=36
 //travel to at2_12
 [r2travel_at2_12] r2=37->p_travel_r2at2_12:(r2'=39) + 1-p_travel_r2at2_12:(r2'=38);
 //try at2_12, no retry allowed
 []r2=39 -> 1.0:(r2'=41) + 1-1.0:(r2'=40); //fail task at r2=40
 //travel to at2Rock_4
 [r2travel_at2Rock_4] r2=41->p_travel_r2at2Rock_4:(r2'=43) + 1-p_travel_r2at2Rock_4:(r2'=42);
 //try at2Rock_4, no retry allowed
 []r2=43 -> 0.99:(r2'=45) + 1-0.99:(r2'=44); //fail task at r2=44
endmodule

module r1
 r1:[0..12];
 //travel to at1Rock_5
 [r1travel_at1Rock_5] r1=0->p_travel_r1at1Rock_5:(r1'=2) + 1-p_travel_r1at1Rock_5:(r1'=1);
 //try at1Rock_5, no retry allowed
 []r1=2 -> 0.98:(r1'=4) + 1-0.98:(r1'=3); //fail task at r1=3
 //travel to at1Rock_1
 [r1travel_at1Rock_1] r1=4->p_travel_r1at1Rock_1:(r1'=6) + 1-p_travel_r1at1Rock_1:(r1'=5);
 //try at1Rock_1, no retry allowed
 []r1=6 -> 0.98:(r1'=8) + 1-0.98:(r1'=7); //fail task at r1=7
 //travel to at1Rock_3
 [r1travel_at1Rock_3] r1=8->p_travel_r1at1Rock_3:(r1'=10) + 1-p_travel_r1at1Rock_3:(r1'=9);
 //try at1Rock_3, no retry allowed
 []r1=10 -> 0.98:(r1'=12) + 1-0.98:(r1'=11); //fail task at r1=11
endmodule


