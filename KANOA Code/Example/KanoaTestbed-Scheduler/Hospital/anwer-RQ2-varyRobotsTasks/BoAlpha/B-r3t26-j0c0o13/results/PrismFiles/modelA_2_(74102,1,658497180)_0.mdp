mdp

const int TT=700;//total time available 

//r2 velocity:1.0
const int travelr2at2_24=20 ;// from location: l3d (robot initial loc) to location: l3f (at2_24)    distance:20
const int travelr2at2_14=10 ;// from location: l3f (at2_24) to location: l2f(at2_14)    distance:10
const int travelr2at2_12=10 ;// from location: l2f (at2_14) to location: l2e(at2_12)    distance:10
const int travelr2at2_26=22 ;// from location: l2e (at2_12) to location: l3g(at2_26)    distance:22
const int travelr2at1_3=20 ;// from location: l3g (at2_26) to location: l1g(at1_3)    distance:20
const int travelr2at2_16=10 ;// from location: l1g (at1_3) to location: l2g(at2_16)    distance:10
const int travelr2at2_22=22 ;// from location: l2g (at2_16) to location: l3e(at2_22)    distance:22
const int travelr2at2_20=10 ;// from location: l3e (at2_22) to location: l3d(at2_20)    distance:10
const int travelr2at2_10=10 ;// from location: l3d (at2_20) to location: l2d(at2_10)    distance:10
//r3 velocity:3.0
const int travelr3at2_4=12 ;// from location: l3d (robot initial loc) to location: l1g (at2_4)    distance:36
//r1 velocity:1.0
const int travelr1at1_11=14 ;// from location: l3d (robot initial loc) to location: l2e (at1_11)    distance:14
const int travelr1at2Rock_6=40 ;// from location: l2e (at1_11) to location: l2a(at2Rock_6)    distance:40
const int travelr1at1Rock_5=0 ;// from location: l2a (at2Rock_6) to location: l2a(at1Rock_5)    distance:0
const int travelr1at1_21=41 ;// from location: l2a (at1Rock_5) to location: l3e(at1_21)    distance:41
const int travelr1at1Rock_7=32 ;// from location: l3e (at1_21) to location: l2b(at1Rock_7)    distance:32
const int travelr1at2Rock_18=14 ;// from location: l2b (at1Rock_7) to location: l3a(at2Rock_18)    distance:14
const int travelr1at1_23=50 ;// from location: l3a (at2Rock_18) to location: l3f(at1_23)    distance:50
const int travelr1at1Rock_1=36 ;// from location: l3f (at1_23) to location: l1c(at1Rock_1)    distance:36
const int travelr1at2Rock_8=14 ;// from location: l1c (at1Rock_1) to location: l2b(at2Rock_8)    distance:14
const int travelr1at2Rock_2=14 ;// from location: l2b (at2Rock_8) to location: l1c(at2Rock_2)    distance:14
const int travelr1at1Rock_17=28 ;// from location: l1c (at2Rock_2) to location: l3a(at1Rock_17)    distance:28
const int travelr1at1_25=60 ;// from location: l3a (at1Rock_17) to location: l3g(at1_25)    distance:60
const int travelr1at1_9=32 ;// from location: l3g (at1_25) to location: l2d(at1_9)    distance:32
const int travelr1at1_13=20 ;// from location: l2d (at1_9) to location: l2f(at1_13)    distance:20
const int travelr1at1_15=10 ;// from location: l2f (at1_13) to location: l2g(at1_15)    distance:10
const int travelr1at1_19=32 ;// from location: l2g (at1_15) to location: l3d(at1_19)    distance:32
const int r2at2_24Time=10;
const int r2at2_14Time=10;
const int r2at2_12Time=10;
const int r2at2_26Time=10;
const int r2at1_3Time=14;
const int r2at2_16Time=10;
const int r2at2_22Time=10;
const int r2at2_20Time=10;
const int r2at2_10Time=10;
const int r3at2_4Time=5;
const int r1at1_11Time=15;
const int r1at2Rock_6Time=17;
const int r1at1Rock_5Time=18;
const int r1at1_21Time=15;
const int r1at1Rock_7Time=18;
const int r1at2Rock_18Time=17;
const int r1at1_23Time=15;
const int r1at1Rock_1Time=18;
const int r1at2Rock_8Time=17;
const int r1at2Rock_2Time=17;
const int r1at1Rock_17Time=18;
const int r1at1_25Time=15;
const int r1at1_9Time=15;
const int r1at1_13Time=15;
const int r1at1_15Time=15;
const int r1at1_19Time=15;
const int maxIdler2=20;
const int maxIdler3=20;
const int maxIdler1=3;

formula done=(r2order=9&r3order=1&r1order=16);

//formulae for ordered tasks
formula r1at1_21Done = r1order>=4 ;
formula r1at1_11Done = r1order>=1 ;
formula r1at1_23Done = r1order>=7 ;
formula r1at1_13Done = r1order>=14 ;
formula r1at1_25Done = r1order>=12 ;
formula r1at1Rock_7Done = r1order>=5 ;
formula r1at1_15Done = r1order>=15 ;
formula r1at1Rock_5Done = r1order>=3 ;
formula r1at1_19Done = r1order>=16 ;
formula r1at1Rock_1Done = r1order>=8 ;
formula r1at1_9Done = r1order>=13 ;
formula r2at1_3Done = r2order>=5 ;
formula r1at1Rock_17Done = r1order>=11 ;


//formulae for consecutive tasks




module r2
 r2order:[0..9];
 r2time:[0..700];
 r2idleTime:[0..maxIdler2];
 [r2at2_24] r2order=0 & (r2time+r2at2_24Time+travelr2at2_24<=TT) & (r2time+travelr2at2_24 >= r1time) & (r1at1_23Done) -> (r2order'=1) & (r2time'=r2time+r2at2_24Time+travelr2at2_24);
 [r2at2_14] r2order=1 & (r2time+r2at2_14Time+travelr2at2_14<=TT) & (r2time+travelr2at2_14 >= r1time) & (r1at1_13Done) -> (r2order'=2) & (r2time'=r2time+r2at2_14Time+travelr2at2_14);
 [r2at2_12] r2order=2 & (r2time+r2at2_12Time+travelr2at2_12<=TT) & (r2time+travelr2at2_12 >= r1time) & (r1at1_11Done) -> (r2order'=3) & (r2time'=r2time+r2at2_12Time+travelr2at2_12);
 [r2at2_26] r2order=3 & (r2time+r2at2_26Time+travelr2at2_26<=TT) & (r2time+travelr2at2_26 >= r1time) & (r1at1_25Done) -> (r2order'=4) & (r2time'=r2time+r2at2_26Time+travelr2at2_26);
 [r2at1_3] r2order=4 & (r2time+r2at1_3Time+travelr2at1_3<=TT) -> (r2order'=5) & (r2time'=r2time+r2at1_3Time+travelr2at1_3);
 [r2at2_16] r2order=5 & (r2time+r2at2_16Time+travelr2at2_16<=TT) & (r2time+travelr2at2_16 >= r1time) & (r1at1_15Done) -> (r2order'=6) & (r2time'=r2time+r2at2_16Time+travelr2at2_16);
 [r2at2_22] r2order=6 & (r2time+r2at2_22Time+travelr2at2_22<=TT) & (r2time+travelr2at2_22 >= r1time) & (r1at1_21Done) -> (r2order'=7) & (r2time'=r2time+r2at2_22Time+travelr2at2_22);
 [r2at2_20] r2order=7 & (r2time+r2at2_20Time+travelr2at2_20<=TT) & (r2time+travelr2at2_20 >= r1time) & (r1at1_19Done) -> (r2order'=8) & (r2time'=r2time+r2at2_20Time+travelr2at2_20);
 [r2at2_10] r2order=8 & (r2time+r2at2_10Time+travelr2at2_10<=TT) & (r2time+travelr2at2_10 >= r1time) & (r1at1_9Done) -> (r2order'=9) & (r2time'=r2time+r2at2_10Time+travelr2at2_10);
 [r2idle] r2order!=9 & (r2time+1<=TT) & (r2idleTime+1<=maxIdler2) -> (r2time'=r2time+1) & (r2idleTime'=r2idleTime+1);
endmodule

module r3
 r3order:[0..1];
 r3time:[0..700];
 r3idleTime:[0..maxIdler3];
 [r3at2_4] r3order=0 & (r3time+r3at2_4Time+travelr3at2_4<=TT) & (r3time+travelr3at2_4 >= r2time) & (r2at1_3Done) -> (r3order'=1) & (r3time'=r3time+r3at2_4Time+travelr3at2_4);
 [r3idle] r3order!=1 & (r3time+1<=TT) & (r3idleTime+1<=maxIdler3) -> (r3time'=r3time+1) & (r3idleTime'=r3idleTime+1);
endmodule

module r1
 r1order:[0..16];
 r1time:[0..700];
 r1idleTime:[0..maxIdler1];
 [r1at1_11] r1order=0 & (r1time+r1at1_11Time+travelr1at1_11<=TT) -> (r1order'=1) & (r1time'=r1time+r1at1_11Time+travelr1at1_11);
 [r1at2Rock_6] r1order=1 & (r1time+r1at2Rock_6Time+travelr1at2Rock_6<=TT) & (r1time+travelr1at2Rock_6 >= r1time) & (r1at1Rock_5Done) -> (r1order'=2) & (r1time'=r1time+r1at2Rock_6Time+travelr1at2Rock_6);
 [r1at1Rock_5] r1order=2 & (r1time+r1at1Rock_5Time+travelr1at1Rock_5<=TT) -> (r1order'=3) & (r1time'=r1time+r1at1Rock_5Time+travelr1at1Rock_5);
 [r1at1_21] r1order=3 & (r1time+r1at1_21Time+travelr1at1_21<=TT) -> (r1order'=4) & (r1time'=r1time+r1at1_21Time+travelr1at1_21);
 [r1at1Rock_7] r1order=4 & (r1time+r1at1Rock_7Time+travelr1at1Rock_7<=TT) -> (r1order'=5) & (r1time'=r1time+r1at1Rock_7Time+travelr1at1Rock_7);
 [r1at2Rock_18] r1order=5 & (r1time+r1at2Rock_18Time+travelr1at2Rock_18<=TT) & (r1time+travelr1at2Rock_18 >= r1time) & (r1at1Rock_17Done) -> (r1order'=6) & (r1time'=r1time+r1at2Rock_18Time+travelr1at2Rock_18);
 [r1at1_23] r1order=6 & (r1time+r1at1_23Time+travelr1at1_23<=TT) -> (r1order'=7) & (r1time'=r1time+r1at1_23Time+travelr1at1_23);
 [r1at1Rock_1] r1order=7 & (r1time+r1at1Rock_1Time+travelr1at1Rock_1<=TT) -> (r1order'=8) & (r1time'=r1time+r1at1Rock_1Time+travelr1at1Rock_1);
 [r1at2Rock_8] r1order=8 & (r1time+r1at2Rock_8Time+travelr1at2Rock_8<=TT) & (r1time+travelr1at2Rock_8 >= r1time) & (r1at1Rock_7Done) -> (r1order'=9) & (r1time'=r1time+r1at2Rock_8Time+travelr1at2Rock_8);
 [r1at2Rock_2] r1order=9 & (r1time+r1at2Rock_2Time+travelr1at2Rock_2<=TT) & (r1time+travelr1at2Rock_2 >= r1time) & (r1at1Rock_1Done) -> (r1order'=10) & (r1time'=r1time+r1at2Rock_2Time+travelr1at2Rock_2);
 [r1at1Rock_17] r1order=10 & (r1time+r1at1Rock_17Time+travelr1at1Rock_17<=TT) -> (r1order'=11) & (r1time'=r1time+r1at1Rock_17Time+travelr1at1Rock_17);
 [r1at1_25] r1order=11 & (r1time+r1at1_25Time+travelr1at1_25<=TT) -> (r1order'=12) & (r1time'=r1time+r1at1_25Time+travelr1at1_25);
 [r1at1_9] r1order=12 & (r1time+r1at1_9Time+travelr1at1_9<=TT) -> (r1order'=13) & (r1time'=r1time+r1at1_9Time+travelr1at1_9);
 [r1at1_13] r1order=13 & (r1time+r1at1_13Time+travelr1at1_13<=TT) -> (r1order'=14) & (r1time'=r1time+r1at1_13Time+travelr1at1_13);
 [r1at1_15] r1order=14 & (r1time+r1at1_15Time+travelr1at1_15<=TT) -> (r1order'=15) & (r1time'=r1time+r1at1_15Time+travelr1at1_15);
 [r1at1_19] r1order=15 & (r1time+r1at1_19Time+travelr1at1_19<=TT) -> (r1order'=16) & (r1time'=r1time+r1at1_19Time+travelr1at1_19);
 [r1idle] r1order!=16 & (r1time+1<=TT) & (r1idleTime+1<=maxIdler1) -> (r1time'=r1time+1) & (r1idleTime'=r1idleTime+1);
endmodule

rewards "idle"
 //Note- there is no idle option for robot ri if maxIdleri==0 (computed beforehand)
 [r2idle] true: 1;
 [r3idle] true: 1;
 [r1idle] true: 1;
endrewards



