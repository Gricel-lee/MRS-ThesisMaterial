/**
 */
package dsl.provider;

import dsl.util.DslAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DslItemProviderAdapterFactory extends DslAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DslItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.ProblemSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProblemSpecificationItemProvider problemSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.ProblemSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProblemSpecificationAdapter() {
		if (problemSpecificationItemProvider == null) {
			problemSpecificationItemProvider = new ProblemSpecificationItemProvider(this);
		}

		return problemSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.WorldModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorldModelItemProvider worldModelItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.WorldModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorldModelAdapter() {
		if (worldModelItemProvider == null) {
			worldModelItemProvider = new WorldModelItemProvider(this);
		}

		return worldModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.Location} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationItemProvider locationItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.Location}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationAdapter() {
		if (locationItemProvider == null) {
			locationItemProvider = new LocationItemProvider(this);
		}

		return locationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.Paths} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathsItemProvider pathsItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.Paths}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathsAdapter() {
		if (pathsItemProvider == null) {
			pathsItemProvider = new PathsItemProvider(this);
		}

		return pathsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.Robot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RobotItemProvider robotItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.Robot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRobotAdapter() {
		if (robotItemProvider == null) {
			robotItemProvider = new RobotItemProvider(this);
		}

		return robotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.Capability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityItemProvider capabilityItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.Capability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityAdapter() {
		if (capabilityItemProvider == null) {
			capabilityItemProvider = new CapabilityItemProvider(this);
		}

		return capabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.TasksModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TasksModelItemProvider tasksModelItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.TasksModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTasksModelAdapter() {
		if (tasksModelItemProvider == null) {
			tasksModelItemProvider = new TasksModelItemProvider(this);
		}

		return tasksModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.AtomicTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicTaskItemProvider atomicTaskItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.AtomicTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicTaskAdapter() {
		if (atomicTaskItemProvider == null) {
			atomicTaskItemProvider = new AtomicTaskItemProvider(this);
		}

		return atomicTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.CompoundTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompoundTaskItemProvider compoundTaskItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.CompoundTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompoundTaskAdapter() {
		if (compoundTaskItemProvider == null) {
			compoundTaskItemProvider = new CompoundTaskItemProvider(this);
		}

		return compoundTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.Mission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissionItemProvider missionItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.Mission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissionAdapter() {
		if (missionItemProvider == null) {
			missionItemProvider = new MissionItemProvider(this);
		}

		return missionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.MissionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissionTaskItemProvider missionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.MissionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissionTaskAdapter() {
		if (missionTaskItemProvider == null) {
			missionTaskItemProvider = new MissionTaskItemProvider(this);
		}

		return missionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.Constraints} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintsItemProvider constraintsItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.Constraints}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintsAdapter() {
		if (constraintsItemProvider == null) {
			constraintsItemProvider = new ConstraintsItemProvider(this);
		}

		return constraintsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.RateSucc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RateSuccItemProvider rateSuccItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.RateSucc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRateSuccAdapter() {
		if (rateSuccItemProvider == null) {
			rateSuccItemProvider = new RateSuccItemProvider(this);
		}

		return rateSuccItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.SpaceXYRobot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpaceXYRobotItemProvider spaceXYRobotItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.SpaceXYRobot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpaceXYRobotAdapter() {
		if (spaceXYRobotItemProvider == null) {
			spaceXYRobotItemProvider = new SpaceXYRobotItemProvider(this);
		}

		return spaceXYRobotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.TaskTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskTimeItemProvider taskTimeItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.TaskTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskTimeAdapter() {
		if (taskTimeItemProvider == null) {
			taskTimeItemProvider = new TaskTimeItemProvider(this);
		}

		return taskTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.AllocateT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllocateTItemProvider allocateTItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.AllocateT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllocateTAdapter() {
		if (allocateTItemProvider == null) {
			allocateTItemProvider = new AllocateTItemProvider(this);
		}

		return allocateTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.Closest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClosestItemProvider closestItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.Closest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClosestAdapter() {
		if (closestItemProvider == null) {
			closestItemProvider = new ClosestItemProvider(this);
		}

		return closestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsl.MaxTasks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxTasksItemProvider maxTasksItemProvider;

	/**
	 * This creates an adapter for a {@link dsl.MaxTasks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxTasksAdapter() {
		if (maxTasksItemProvider == null) {
			maxTasksItemProvider = new MaxTasksItemProvider(this);
		}

		return maxTasksItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (problemSpecificationItemProvider != null) problemSpecificationItemProvider.dispose();
		if (worldModelItemProvider != null) worldModelItemProvider.dispose();
		if (locationItemProvider != null) locationItemProvider.dispose();
		if (pathsItemProvider != null) pathsItemProvider.dispose();
		if (robotItemProvider != null) robotItemProvider.dispose();
		if (capabilityItemProvider != null) capabilityItemProvider.dispose();
		if (tasksModelItemProvider != null) tasksModelItemProvider.dispose();
		if (atomicTaskItemProvider != null) atomicTaskItemProvider.dispose();
		if (compoundTaskItemProvider != null) compoundTaskItemProvider.dispose();
		if (missionItemProvider != null) missionItemProvider.dispose();
		if (missionTaskItemProvider != null) missionTaskItemProvider.dispose();
		if (constraintsItemProvider != null) constraintsItemProvider.dispose();
		if (rateSuccItemProvider != null) rateSuccItemProvider.dispose();
		if (spaceXYRobotItemProvider != null) spaceXYRobotItemProvider.dispose();
		if (taskTimeItemProvider != null) taskTimeItemProvider.dispose();
		if (allocateTItemProvider != null) allocateTItemProvider.dispose();
		if (closestItemProvider != null) closestItemProvider.dispose();
		if (maxTasksItemProvider != null) maxTasksItemProvider.dispose();
	}

}
